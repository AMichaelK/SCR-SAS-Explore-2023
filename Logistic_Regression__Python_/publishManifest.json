{
  "creationTimeStamp": "2023-08-30T15:33:00.292273Z",
  "createdBy": "ankanz",
  "modifiedTimeStamp": "2023-08-30T15:33:00.292274Z",
  "modifiedBy": "ankanz",
  "id": "c38f0759-25c9-4fa1-af28-e76c2c7dcb16",
  "destinationName": "SCRDemo",
  "destination": {
    "creationTimeStamp": "2023-08-23T18:13:15.924345Z",
    "createdBy": "ankanz",
    "modifiedTimeStamp": "2023-08-24T20:38:13.320454Z",
    "modifiedBy": "ankanz",
    "version": 2,
    "id": "ada9fe3f-54da-4fe2-b589-fadfdf98faf6",
    "name": "SCRDemo",
    "destinationType": "git",
    "properties": [
      {
        "name": "credDomainId",
        "value": "ankanz"
      },
      {
        "name": "remoteRepositoryURL",
        "value": "https://github.com/AMichaelK/SCR-SAS-Explore-2023.git"
      },
      {
        "name": "localRepositoryLocation",
        "value": "/Python"
      },
      {
        "name": "userEmail",
        "value": "amkan18@gmail.com"
      },
      {
        "name": "userName",
        "value": "amichaelk"
      },
      {
        "name": "codeGenerationMode",
        "value": "mas"
      }
    ],
    "links": [
      {
        "method": "GET",
        "rel": "up",
        "href": "/modelPublish/destinations",
        "uri": "/modelPublish/destinations",
        "type": "application/vnd.sas.collection"
      },
      {
        "method": "GET",
        "rel": "self",
        "href": "/modelPublish/destinations/SCRDemo",
        "uri": "/modelPublish/destinations/SCRDemo",
        "type": "application/vnd.sas.models.publishing.destination"
      },
      {
        "method": "DELETE",
        "rel": "delete",
        "href": "/modelPublish/destinations/SCRDemo",
        "uri": "/modelPublish/destinations/SCRDemo"
      },
      {
        "method": "PUT",
        "rel": "update",
        "href": "/modelPublish/destinations/SCRDemo",
        "uri": "/modelPublish/destinations/SCRDemo",
        "type": "application/vnd.sas.models.publishing.destination"
      },
      {
        "method": "GET",
        "rel": "getGitFolders",
        "href": "/modelPublish/destinations/SCRDemo/gitFolders",
        "uri": "/modelPublish/destinations/SCRDemo/gitFolders",
        "type": "application/vnd.sas.collection"
      }
    ]
  },
  "content": {
    "creationTimeStamp": "0001-01-01T00:00:00Z",
    "modifiedTimeStamp": "0001-01-01T00:00:00Z",
    "modelName": "Logistic_Regression__Python_",
    "principalID": "62c6c111-0c77-4bbc-a7c0-f6f40cf959c6",
    "codeType": "python",
    "code": "data sasep.out;\n   dcl package pymas pm;\n   dcl package logger logr('App.MM.Python.DS2');\n   dcl varchar(32767) character set utf8 pypgm;\n   dcl double resultCode revision;\n   dcl varchar(100) \"JOB\";\n   dcl varchar(100) \"REASON\";\n   dcl double \"CLAGE\";\n   dcl double \"CLNO\";\n   dcl double \"DEBTINC\";\n   dcl double \"DELINQ\";\n   dcl double \"DEROG\";\n   dcl double \"NINQ\";\n   dcl double \"YOJ\";\n   dcl double \"EM_EVENTPROBABILITY\";\n   dcl varchar(100) \"EM_CLASSIFICATION\";\n\n   method score(\n   varchar(100) \"JOB\",\n   varchar(100) \"REASON\",\n   double \"CLAGE\",\n   double \"CLNO\",\n   double \"DEBTINC\",\n   double \"DELINQ\",\n   double \"DEROG\",\n   double \"NINQ\",\n   double \"YOJ\",\n   in_out double resultCode,\n   in_out double \"EM_EVENTPROBABILITY\",\n   in_out varchar(100) \"EM_CLASSIFICATION\");\n\n      resultCode = revision = 0;\n      if null(pm) then do;\n         pm = _new_ pymas();\n         resultCode = pm.useModule('model_exec_264bb25f-03c7-4ad0-b549-fa8ccb89b542', 1);\n         if resultCode then do;\n            resultCode = pm.appendSrcLine('import sys');\n            resultCode = pm.appendSrcLine('sys.path.append(\"/models/resources/viya/62c6c111-0c77-4bbc-a7c0-f6f40cf959c6/\")');\n            resultCode = pm.appendSrcLine('import settings_62c6c111_0c77_4bbc_a7c0_f6f40cf959c6');\n            resultCode = pm.appendSrcLine('settings_62c6c111_0c77_4bbc_a7c0_f6f40cf959c6.pickle_path = \"/models/resources/viya/62c6c111-0c77-4bbc-a7c0-f6f40cf959c6/\"');\n            resultCode = pm.appendSrcLine('import hmeq_logistic_score');\n            resultCode = pm.appendSrcLine('def scoreHMEQLogisticModel(JOB, REASON, CLAGE, CLNO, DEBTINC, DELINQ, DEROG, NINQ, YOJ):');\n            resultCode = pm.appendSrcLine('    \"Output: EM_EVENTPROBABILITY, EM_CLASSIFICATION\"');\n            resultCode = pm.appendSrcLine('    return hmeq_logistic_score.scoreHMEQLogisticModel(JOB, REASON, CLAGE, CLNO, DEBTINC, DELINQ, DEROG, NINQ, YOJ)');\n\n            revision = pm.publish(pm.getSource(), 'model_exec_264bb25f-03c7-4ad0-b549-fa8ccb89b542');\n            if ( revision \u003c 1 ) then do;\n               logr.log( 'e', 'py.publish() failed.');\n               resultCode = -1;\n               return;\n            end;\n         end;\n      end;\n\n      resultCode = pm.useMethod('scoreHMEQLogisticModel');\n      if resultCode then do;\n         logr.log('E', 'useMethod() failed. resultCode=$s', resultCode);\n         return;\n      end;\n      resultCode = pm.setString('JOB', JOB);\n      if resultCode then\n         logr.log('E', 'setString for JOB failed.  resultCode=$s', resultCode);\n      resultCode = pm.setString('REASON', REASON);\n      if resultCode then\n         logr.log('E', 'setString for REASON failed.  resultCode=$s', resultCode);\n      resultCode = pm.setDouble('CLAGE', CLAGE);\n      if resultCode then\n         logr.log('E', 'setDouble for CLAGE failed.  resultCode=$s', resultCode);\n      resultCode = pm.setDouble('CLNO', CLNO);\n      if resultCode then\n         logr.log('E', 'setDouble for CLNO failed.  resultCode=$s', resultCode);\n      resultCode = pm.setDouble('DEBTINC', DEBTINC);\n      if resultCode then\n         logr.log('E', 'setDouble for DEBTINC failed.  resultCode=$s', resultCode);\n      resultCode = pm.setDouble('DELINQ', DELINQ);\n      if resultCode then\n         logr.log('E', 'setDouble for DELINQ failed.  resultCode=$s', resultCode);\n      resultCode = pm.setDouble('DEROG', DEROG);\n      if resultCode then\n         logr.log('E', 'setDouble for DEROG failed.  resultCode=$s', resultCode);\n      resultCode = pm.setDouble('NINQ', NINQ);\n      if resultCode then\n         logr.log('E', 'setDouble for NINQ failed.  resultCode=$s', resultCode);\n      resultCode = pm.setDouble('YOJ', YOJ);\n      if resultCode then\n         logr.log('E', 'setDouble for YOJ failed.  resultCode=$s', resultCode);\n      resultCode = pm.execute();\n      if (resultCode) then\n         logr.log('E', 'Error: pm.execute failed.  resultCode=$s', resultCode);\n      else do;\n         \"EM_EVENTPROBABILITY\" = pm.getDouble('EM_EVENTPROBABILITY');\n         \"EM_CLASSIFICATION\" = pm.getString('EM_CLASSIFICATION');\n      end;\n   end;\n\n   method run();\n      set SASEP.IN;\n      score(\"JOB\",\"REASON\",\"CLAGE\",\"CLNO\",\"DEBTINC\",\"DELINQ\",\"DEROG\",\"NINQ\",\"YOJ\", resultCode, \"EM_EVENTPROBABILITY\", \"EM_CLASSIFICATION\");\n   end;\nenddata;\n",
    "sourceURI": "/modelRepository/models/62c6c111-0c77-4bbc-a7c0-f6f40cf959c6",
    "projectID": "d34ed14b-3f12-49c8-974a-94ea19122bd2",
    "projectVersionID": "35108f20-8fe8-47f7-b592-9e355cbe35ba",
    "modelID": "62c6c111-0c77-4bbc-a7c0-f6f40cf959c6",
    "modelVersionID": "4.0",
    "publishLevel": "model",
    "variableXML": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003cScore\u003e\n  \u003cTargetList\u003e\u003c/TargetList\u003e\n  \u003cProducer\u003e\n    \u003cName\u003eSAS Model Manager\u003c/Name\u003e\n    \u003cVersion\u003e15.1\u003c/Version\u003e\n  \u003c/Producer\u003e\n  \u003cInput\u003e\n    \u003cVariable\u003e\n      \u003cName\u003e\"JOB\"\u003c/Name\u003e\n      \u003cType\u003echaracter\u003c/Type\u003e\n    \u003c/Variable\u003e\n  \u003c/Input\u003e\n  \u003cInput\u003e\n    \u003cVariable\u003e\n      \u003cName\u003e\"REASON\"\u003c/Name\u003e\n      \u003cType\u003echaracter\u003c/Type\u003e\n    \u003c/Variable\u003e\n  \u003c/Input\u003e\n  \u003cInput\u003e\n    \u003cVariable\u003e\n      \u003cName\u003e\"CLAGE\"\u003c/Name\u003e\n      \u003cType\u003enumeric\u003c/Type\u003e\n    \u003c/Variable\u003e\n  \u003c/Input\u003e\n  \u003cInput\u003e\n    \u003cVariable\u003e\n      \u003cName\u003e\"CLNO\"\u003c/Name\u003e\n      \u003cType\u003enumeric\u003c/Type\u003e\n    \u003c/Variable\u003e\n  \u003c/Input\u003e\n  \u003cInput\u003e\n    \u003cVariable\u003e\n      \u003cName\u003e\"DEBTINC\"\u003c/Name\u003e\n      \u003cType\u003enumeric\u003c/Type\u003e\n    \u003c/Variable\u003e\n  \u003c/Input\u003e\n  \u003cInput\u003e\n    \u003cVariable\u003e\n      \u003cName\u003e\"DELINQ\"\u003c/Name\u003e\n      \u003cType\u003enumeric\u003c/Type\u003e\n    \u003c/Variable\u003e\n  \u003c/Input\u003e\n  \u003cInput\u003e\n    \u003cVariable\u003e\n      \u003cName\u003e\"DEROG\"\u003c/Name\u003e\n      \u003cType\u003enumeric\u003c/Type\u003e\n    \u003c/Variable\u003e\n  \u003c/Input\u003e\n  \u003cInput\u003e\n    \u003cVariable\u003e\n      \u003cName\u003e\"NINQ\"\u003c/Name\u003e\n      \u003cType\u003enumeric\u003c/Type\u003e\n    \u003c/Variable\u003e\n  \u003c/Input\u003e\n  \u003cInput\u003e\n    \u003cVariable\u003e\n      \u003cName\u003e\"YOJ\"\u003c/Name\u003e\n      \u003cType\u003enumeric\u003c/Type\u003e\n    \u003c/Variable\u003e\n  \u003c/Input\u003e\n  \u003cOutput\u003e\n    \u003cVariable\u003e\n      \u003cName\u003e\"EM_EVENTPROBABILITY\"\u003c/Name\u003e\n      \u003cType\u003enumeric\u003c/Type\u003e\n    \u003c/Variable\u003e\n  \u003c/Output\u003e\n  \u003cOutput\u003e\n    \u003cVariable\u003e\n      \u003cName\u003e\"EM_CLASSIFICATION\"\u003c/Name\u003e\n      \u003cType\u003echaracter\u003c/Type\u003e\n    \u003c/Variable\u003e\n  \u003c/Output\u003e\n\u003c/Score\u003e"
  },
  "properties": {
    "gitFolderPath": "Logistic_Regression__Python_",
    "gitRepositoryURL": "https://github.com/AMichaelK/SCR-SAS-Explore-2023.git"
  },
  "sourceURI": "/modelRepository/models/62c6c111-0c77-4bbc-a7c0-f6f40cf959c6",
  "inputVariables": null,
  "outputVariables": null,
  "component": {},
  "product": {},
  "service": {
    "name": "Model Publish service"
  },
  "baseImage": {}
}